{"/home/travis/build/npmtest/node-npmtest-backstopjs/test.js":"/* istanbul instrument in package npmtest_backstopjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-backstopjs/lib.npmtest_backstopjs.js":"/* istanbul instrument in package npmtest_backstopjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_backstopjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_backstopjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-backstopjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-backstopjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_backstopjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_backstopjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_backstopjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_backstopjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_backstopjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_backstopjs.__dirname + '/lib.npmtest_backstopjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/runner.js":"var executeCommand = require('./command/');\nvar makeConfig = require('./util/makeConfig');\n\nmodule.exports = function (command, options) {\n  var config = makeConfig(command, options);\n  return executeCommand(command, config);\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/command/index.js":"var path = require('path');\nvar logger = require('../util/logger')('COMMAND');\n\n/*\n * Each file included in this folder (except `index.js`) is a command and must export the following object\n * {\n *   execute: (...args) => void  | command itself\n * }\n *\n * The execute function should not have much logic\n */\n\n/* Each and every command defined, including commands used in before/after */\nvar commandNames = [\n  'genConfig',\n  'openReport',\n  'reference',\n  'report',\n  'test',\n  'approve'\n];\n\n/* Commands that are only exposed to higher levels */\nvar exposedCommandNames = [\n  'genConfig',\n  'reference',\n  'test',\n  'openReport',\n  'approve'\n];\n\n/* Used to convert an array of objects {name, execute} to a unique object {[name]: execute} */\nfunction toObjectReducer (object, command) {\n  object[command.name] = command.execute;\n  return object;\n}\n\nvar commands = commandNames\n  .map(function requireCommand (commandName) {\n    return {\n      name: commandName,\n      commandDefinition: require(path.join(__dirname, commandName))\n    };\n  })\n  .map(function definitionToExecution (command) {\n    return {\n      name: command.name,\n      execute: function execute (config) {\n        logger.info('Executing core for `' + command.name + '`');\n\n        var promise = command.commandDefinition.execute(config);\n\n        // If the command didn't return a promise, assume it resolved already\n        if (!promise) {\n          logger.error('Resolved already:' + command.name);\n          promise = Promise.resolve();\n        }\n\n        // Do the catch separately or the main runner\n        // won't be able to catch it a second time\n        promise.catch(function (error) {\n          logger.error('Command `' + command.name + '` ended with an error');\n          logger.error(error);\n        });\n\n        return promise.then(function (result) {\n          logger.success('Command `' + command.name + '` sucessfully executed');\n          return result;\n        });\n      }\n    };\n  })\n  .reduce(toObjectReducer, {});\n\nvar exposedCommands = exposedCommandNames\n  .filter(function commandIsDefined (commandName) {\n    return commands.hasOwnProperty(commandName);\n  })\n  .map(function (commandName) {\n    return {\n      name: commandName,\n      execute: commands[commandName]\n    };\n  })\n  .reduce(toObjectReducer, {});\n\nfunction execute (commandName, config) {\n  if (!exposedCommands.hasOwnProperty(commandName)) {\n    if (commandName.charAt(0) === '_' && commands.hasOwnProperty(commandName.substring(1))) {\n      commandName = commandName.substring(1);\n    } else {\n      throw new Error('The command `' + commandName + '` is not exposed publicly.');\n    }\n  }\n\n  return commands[commandName](config);\n}\n\nmodule.exports = execute;\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/logger.js":"var chalk = require('chalk');\nvar makeSpaces = require('./makeSpaces');\n\nfunction identity (string) { return string; }\n\nvar typeToColor = {\n  error: identity,\n  warn: identity,\n  log: identity,\n  info: identity,\n  debug: identity,\n  success: identity\n};\n\nvar typeToTitleColor = {\n  error: chalk.red,\n  warn: chalk.yellow,\n  log: chalk.white,\n  info: chalk.grey,\n  debug: chalk.blue,\n  success: chalk.green\n};\n\nvar longestTitle = 5;\n\nfunction paddedString (length, string) {\n  var padding = makeSpaces(length + 3);\n\n  if (string instanceof Error) {\n    string = string.stack;\n  }\n\n  if (typeof string !== 'string') {\n    return string;\n  }\n\n  var lines = string.split('\\n');\n  var paddedLines = lines\n    .slice(1)\n    .map(function addPadding (string) {\n      return padding + string;\n    });\n  paddedLines.unshift(lines[0]);\n\n  return paddedLines.join('\\n');\n}\n\nfunction message (type, subject, string) {\n  if (!typeToColor.hasOwnProperty(type)) {\n    type = 'info';\n    console.log(typeToColor.warn('Type ' + type + ' is not defined as logging type'));\n  }\n\n  if (subject.length < longestTitle) {\n    const appendChar = ' ';\n    while (subject.length < longestTitle) {\n      subject = appendChar + subject;\n    }\n  } else {\n    longestTitle = subject.length;\n  }\n\n  console.log(typeToTitleColor[type](subject + ' ') + '| ' + paddedString(longestTitle, typeToColor[type](string)));\n}\n\nmodule.exports = function (subject) {\n  return {\n    error: message.bind(null, 'error', subject),\n    warn: message.bind(null, 'warn', subject),\n    log: message.bind(null, 'log', subject),\n    info: message.bind(null, 'info', subject),\n    debug: message.bind(null, 'debug', subject),\n    success: message.bind(null, 'success', subject)\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/makeSpaces.js":"module.exports = function makeSpaces (length) {\n  var i = 0;\n  var result = '';\n  while (i < length) {\n    result += ' ';\n    i++;\n  }\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/command/genConfig.js":"var fs = require('../util/fs');\nvar logger = require('../util/logger')('genConfig');\n\n/**\n * Copies a boilerplate config file to the current config file location.\n */\nmodule.exports = {\n  execute: function genConfig (config) {\n    var promises = [];\n\n    if (config.casper_scripts) {\n      logger.log(\"Copying '\" + config.casper_scripts_default + \"' to '\" + config.casper_scripts + \"'\");\n\n      promises.push(fs.copy(config.casper_scripts_default, config.casper_scripts));\n    } else {\n      logger.error('ERROR: Can\\'t generate a scripts directory. No \\'casper_scripts\\' path property was found in backstop.json.');\n    }\n\n    // Copies a boilerplate config file to the current config file location.\n    promises.push(fs.copy(config.captureConfigFileNameDefault, config.backstopConfigFileName).then(function () {\n      logger.log(\"Configuration file written at '\" + config.backstopConfigFileName + \"'\");\n    }, function (err) {\n      throw err;\n    }));\n\n    return Promise.all(promises);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/fs.js":"var fs = require('fs');\nvar fsExtra = require('fs-extra');\nvar promisify = require('./promisify');\n\nvar fsPromisified = {\n  readdir: promisify(fs.readdir),\n  createWriteStream: fs.createWriteStream,\n  existsSync: fs.existsSync,\n  readFile: promisify(fs.readFile),\n  writeFile: promisify(fs.writeFile),\n  unlink: promisify(fs.unlink),\n  remove: promisify(fsExtra.remove),\n  stat: promisify(fs.stat),\n  copy: promisify(fsExtra.copy),\n  exists: function exists (file) {\n    return fsPromisified.stat(file)\n      .then(function (args) {\n        return args[0];\n      })\n      .catch(function () {\n        return false;\n      });\n  }\n};\n\nmodule.exports = fsPromisified;\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/promisify.js":"\nmodule.exports = function promisify (func) {\n  return function () {\n    var args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments));\n    return new Promise(function (resolve, reject) {\n      args.push(function (err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        var args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments));\n        resolve(args.slice(1));\n      });\n      func.apply(this, args);\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/command/openReport.js":"var open = require('open');\nvar logger = require('../util/logger')('openReport');\nvar path = require('path');\n\nmodule.exports = {\n  execute: function (config) {\n    function toAbsolute (p) {\n      if (path.isAbsolute(p)) {\n        return p;\n      }\n      return path.join(config.projectPath, p);\n    }\n\n    return new Promise(function (resolve, reject) {\n      logger.log('Opening report.');\n      open(toAbsolute(config.compareReportURL), function (err) {\n        if (err) {\n          logger.error('An error occured while opening report in the default browser.');\n        }\n        resolve();\n      });\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/command/reference.js":"var createBitmaps = require('../util/createBitmaps');\nvar fs = require('../util/fs');\nvar logger = require('../util/logger')('clean');\n\nmodule.exports = {\n  execute: function (config) {\n    var firstStep;\n\n    // do not remove reference directory if we are in incremental mode\n    if (config.args.filter || config.args.i) {\n      firstStep = Promise.resolve();\n    } else {\n      firstStep = fs.remove(config.bitmaps_reference).then(function () {\n        logger.success(config.bitmaps_reference + ' was cleaned.');\n      });\n    }\n\n    return firstStep.then(function () {\n      return createBitmaps(config, true);\n    }).then(function () {\n      console.log('\\nRun `$ backstop test` to generate diff report.\\n');\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/createBitmaps.js":"var path = require('path');\n\nvar fs = require('./fs');\nvar each = require('./each');\nvar runCasper = require('./runCasper');\n\nvar logger = require('./logger')('createBitmaps');\n\nvar GENERATE_BITMAPS_SCRIPT = 'capture/genBitmaps.js';\n\nfunction regexTest (string, search) {\n  var re = new RegExp(search);\n  return re.test(string);\n}\n\n/**\n * Utility for generating a temporary config file required by GENERATE_BITMAPS_SCRIPT.\n * @config  {Object}        Base user config object (derrived by user config file + CL param overrides).\n * @isReference  {Boolean}  True if running reference flow.\n * @return {Promise}        Resolves when fs.writeFile has completed.\n */\nfunction writeReferenceCreateConfig (config, isReference) {\n  var configJSON;\n\n  if (typeof config.args.config === 'object') {\n    configJSON = config.args.config;\n  } else {\n    configJSON = require(config.backstopConfigFileName);\n  }\n\n  configJSON.isReference = isReference;\n  configJSON.paths.tempCompareConfigFileName = config.tempCompareConfigFileName;\n  configJSON.defaultMisMatchThreshold = config.defaultMisMatchThreshold;\n  configJSON.backstopConfigFileName = config.backstopConfigFileName;\n\n  if (config.args.filter) {\n    var scenarii = [];\n\n    config.args.filter.split(',').forEach(function (filteredTest) {\n      each(configJSON.scenarios, function (scenario) {\n        if (regexTest(scenario.label, filteredTest)) {\n          scenarii.push(scenario);\n        }\n      });\n    });\n\n    logger.log('Will generate ' + scenarii.length + ' out of ' + configJSON.scenarios.length + ' scenarios');\n\n    configJSON.scenarios = scenarii;\n  }\n\n  return fs.writeFile(config.captureConfigFileName, JSON.stringify(configJSON));\n}\n\nmodule.exports = function (config, isReference) {\n  return writeReferenceCreateConfig(config, isReference).then(function () {\n    var tests = [path.join(config.backstop, GENERATE_BITMAPS_SCRIPT)];\n    var casperChild = runCasper(config, tests);\n\n    return new Promise(function (resolve, reject) {\n      casperChild.on('close', function (code) {\n        var success = code === 0; // Will be 1 in the event of failure\n        var result = (success) ? 'Bitmap file generation completed.' : 'Testing script failed with code: ' + code;\n\n        console.log('\\n' + result);\n\n        // exit if there was some kind of failure in the casperChild process\n        if (code !== 0) {\n          console.log('\\nAn unexpected error occured. You may want to try setting the debug option to `true` in your config file.');\n          reject(new Error('An unexpected error occured. You may want to try setting the debug option to `true` in your config file.'));\n          return;\n        }\n\n        resolve();\n      });\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/each.js":"module.exports = function each (arr, callback) {\n  for (var i in arr) {\n    if (arr.hasOwnProperty(i)) {\n      callback(arr[i], i, arr);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/runCasper.js":"var spawn = require('child_process').spawn;\nvar findExecutable = require('./findExecutable');\n\nfunction getCasperArgs (config, tests) {\n  var args = [];\n  if (/slimer/.test(config.engine)) {\n    args = ['--engine=slimerjs'];\n  }\n\n  if (config.casperFlags) {\n    if (/--engine=/.test(config.casperFlags.toString())) {\n      args = config.casperFlags; // casperFlags --engine setting takes precedence -- replace if found.\n    } else {\n      args = args.concat(config.casperFlags);\n    }\n  }\n\n  if (config.args.user && config.args.password) {\n    args = args.concat(['--user=' + config.args.user, '--password=' + config.args.password]);\n  }\n\n  return tests.concat(args);\n}\n\nmodule.exports = function (config, tests) {\n  var casperArgs = getCasperArgs(config, tests);\n  if (config.captureConfigFileName) {\n    casperArgs[casperArgs.length] = '--captureConfigFileName=' + config.captureConfigFileName;\n  }\n\n  console.log('\\nRunning CasperJS with: ', casperArgs);\n\n  process.env.PHANTOMJS_EXECUTABLE = findExecutable('phantomjs-prebuilt', 'phantomjs');\n\n  var casperProcess = findExecutable('casperjs', 'casperjs');\n  var casperChild = spawn(casperProcess, casperArgs, {cwd: config.projectPath});\n\n  var prefix = 'CasperJS: ';\n  casperChild.stdout.on('data', function (data) {\n    console.log(prefix, data.toString().slice(0, -1).split('\\n').join('\\n' + prefix)); // Remove \\n\n  });\n\n  casperChild.stderr.on('data', function (data) {\n    console.error(prefix, data.toString().slice(0, -1).split('\\n').join('\\n' + prefix)); // Remove \\n\n  });\n\n  return casperChild;\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/findExecutable.js":"var path = require('path');\n\nmodule.exports = function (module, bin) {\n  try {\n    if (module === 'phantomjs-prebuilt') {\n      return require('phantomjs-prebuilt').path;\n    }\n\n    var pathToExecutableModulePackageJson = require.resolve(path.join(module, 'package.json'));\n    var executableModulePackageJson = require(pathToExecutableModulePackageJson);\n    var relativePathToExecutableBinary = executableModulePackageJson.bin[bin] || executableModulePackageJson.bin;\n    var pathToExecutableModule = pathToExecutableModulePackageJson.replace('package.json', '');\n    return path.join(pathToExecutableModule, relativePathToExecutableBinary);\n  } catch (e) {\n    throw new Error('Couldn\\'t find executable for module \"' + module + '\" and bin \"' + bin + '\"\\n' + e.message);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/command/report.js":"var path = require('path');\nvar chalk = require('chalk');\nvar junitWriter = new (require('junitwriter'))();\n\nvar allSettled = require('../util/allSettled');\nvar fs = require('../util/fs');\nvar logger = require('../util/logger')('report');\nvar compare = require('../util/compare');\n\nfunction writeReport (config, reporter) {\n  var promises = [];\n\n  if (config.report && config.report.indexOf('CI') > -1 && config.ciReport.format === 'junit') {\n    promises.push(writeJunitReport(config, reporter));\n  }\n\n  promises.push(writeBrowserReport(config, reporter));\n\n  return allSettled(promises);\n}\n\nfunction writeBrowserReport (config, reporter) {\n  function toAbsolute (p) {\n    return (path.isAbsolute(p)) ? p : path.join(config.projectPath, p);\n  }\n  logger.log('Writing browser report');\n  return fs.copy(config.comparePath, toAbsolute(config.html_report)).then(function () {\n    logger.log('Browser reported copied');\n\n    // Fixing URLs in the configuration\n    var report = toAbsolute(config.html_report);\n    for (var i in reporter.tests) {\n      if (reporter.tests.hasOwnProperty(i)) {\n        var pair = reporter.tests[i].pair;\n        reporter.tests[i].pair.reference = path.relative(report, toAbsolute(pair.reference));\n        reporter.tests[i].pair.test = path.relative(report, toAbsolute(pair.test));\n\n        if (pair.diffImage) {\n          reporter.tests[i].pair.diffImage = path.relative(report, toAbsolute(pair.diffImage));\n        }\n      }\n    }\n\n    var jsonp = 'report(' + JSON.stringify(reporter, null, 2) + ');';\n    return fs.writeFile(toAbsolute(config.compareConfigFileName), jsonp).then(function () {\n      logger.log('Copied configuration to: ' + toAbsolute(config.compareConfigFileName));\n    }, function (err) {\n      logger.error('Failed configuration copy');\n      throw err;\n    });\n  }).then(function () {\n    if (config.openReport && config.report && config.report.indexOf('browser') > -1) {\n      var executeCommand = require('./index');\n      return executeCommand('_openReport', config);\n    }\n  });\n}\n\nfunction writeJunitReport (config, reporter) {\n  logger.log('Writing jUnit Report');\n\n  var testSuite = junitWriter.addTestsuite(reporter.testSuite);\n\n  for (var i in reporter.tests) {\n    if (!reporter.tests.hasOwnProperty(i)) {\n      continue;\n    }\n\n    var test = reporter.tests[i];\n    var testCase = testSuite.addTestcase(' ›› ' + test.pair.label, test.pair.selector);\n\n    if (!test.passed()) {\n      var error = 'Design deviation ›› ' + test.pair.label + ' (' + test.pair.selector + ') component';\n      testCase.addError(error, 'CSS component');\n      testCase.addFailure(error, 'CSS component');\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    var testReportFilename = config.testReportFileName || config.ciReport.testReportFileName;\n    testReportFilename = testReportFilename.replace(/\\.xml$/, '') + '.xml';\n    var destination = path.join(config.ci_report, testReportFilename);\n    junitWriter.save(destination, function (err) {\n      if (err) {\n        return reject(err);\n      }\n\n      logger.success('jUnit report written to: ' + destination);\n\n      resolve();\n    });\n  });\n}\n\nmodule.exports = {\n  execute: function (config) {\n    return compare(config).then(function (report) {\n      var failed = report.failed();\n      logger.log('Test completed...');\n      logger.log(chalk.green(report.passed() + ' Passed'));\n      logger.log(chalk[(failed ? 'red' : 'green')](+failed + ' Failed'));\n\n      return writeReport(config, report).then(function (results) {\n        for (var i = 0; i < results.length; i++) {\n          if (results[i].state !== 'fulfilled') {\n            logger.error('Failed writing report with error: ' + results[i].value);\n          }\n        }\n\n        if (failed) {\n          logger.error('*** Mismatch errors found ***');\n          logger.log('For a detailed report run `backstop openReport`\\n');\n          throw new Error('Mismatch errors found.');\n        }\n      });\n    }, function (e) {\n      logger.error('Comparison failed with error:' + e);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/allSettled.js":"module.exports = function (promises) {\n  return Promise.all(promises.map(function (promise) {\n    return promise.then(function (value) {\n      return { state: 'fulfilled', value: value };\n    }).catch(function (reason) {\n      return { state: 'rejected', reason: reason };\n    });\n  }));\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/compare.js":"var resemble = require('node-resemble-js');\nvar path = require('path');\nvar map = require('p-map');\n\nvar fs = require('fs');\nvar streamToPromise = require('./streamToPromise');\nvar Reporter = require('./Reporter');\nvar logger = require('./logger')('compare');\n\nvar ASYNC_COMPARE_LIMIT = 20;\n\nfunction storeFailedDiffImage (testPath, data) {\n  var failedDiffFilename = getFailedDiffFilename(testPath);\n  console.log('   See:', failedDiffFilename);\n\n  var failedDiffStream = fs.createWriteStream(failedDiffFilename);\n  var ext = failedDiffFilename.substring(failedDiffFilename.lastIndexOf('.') + 1);\n\n  if (ext === 'png') {\n    var storageStream = data.getDiffImage()\n        .pack()\n        .pipe(failedDiffStream);\n    return streamToPromise(storageStream, failedDiffFilename);\n  }\n\n  if (ext === 'jpg' || ext === 'jpeg') {\n    fs.writeFileSync(failedDiffFilename, data.getDiffImageAsJPEG(85));\n    return Promise.resolve(failedDiffFilename);\n  }\n}\n\nfunction getFailedDiffFilename (testPath) {\n  var lastSlash = testPath.lastIndexOf(path.sep);\n  return testPath.slice(0, lastSlash + 1) + 'failed_diff_' + testPath.slice(lastSlash + 1, testPath.length);\n}\n\nfunction compareImage (referencePath, testPath, resembleOutputSettings) {\n  return new Promise(function (resolve, reject) {\n    if (!fs.existsSync(referencePath)) {\n      // Returning the error as a \"resolve\" so all errors can be caught instead of just the first one\n      return resolve(new Error('Reference image not found: ' + referencePath));\n    }\n\n    if (!fs.existsSync(testPath)) {\n      // Returning the error as a \"resolve\" so all errors can be caught instead of just the first one\n      return resolve(new Error('Test image not found: ' + testPath));\n    }\n\n    resemble.outputSettings(resembleOutputSettings || {});\n    resemble(referencePath).compareTo(testPath).onComplete(resolve);\n  });\n}\n\nmodule.exports = function (config) {\n  var compareConfig = require(config.tempCompareConfigFileName).compareConfig;\n\n  var report = new Reporter(config.ciReport.testSuiteName);\n\n  return map(compareConfig.testPairs, function (pair) {\n    var Test = report.addTest(pair);\n\n    var referencePath = path.join(config.projectPath, pair.reference);\n    var testPath = path.join(config.projectPath, pair.test);\n\n    return compareImage(referencePath, testPath, config.resembleOutputOptions)\n      .then(function logCompareResult (data) {\n        pair.diff = data;\n\n        if (data.isSameDimensions && data.misMatchPercentage <= pair.misMatchThreshold) {\n          Test.status = 'pass';\n          logger.success('OK: ' + pair.label + ' ' + pair.fileName);\n          data = null;\n          pair.diff.getDiffImage = null;\n\n          return pair;\n        }\n\n        Test.status = 'fail';\n        if (data instanceof Error) {\n          logger.error('ERROR ' + data.message + ': ' + pair.label + ' ' + pair.fileName);\n          pair.error = data;\n          return pair;\n        } else {\n          logger.error('ERROR { size: ' + (data.isSameDimensions ? 'ok' : 'isDifferent') + ', content: ' + data.misMatchPercentage + '%, threshold: ' + pair.misMatchThreshold + '% }: ' + pair.label + ' ' + pair.fileName);\n        }\n\n        return storeFailedDiffImage(testPath, data).then(function (compare) {\n          pair.diffImage = compare;\n          data = null;\n          pair.diff.getDiffImage = null;\n\n          return pair;\n        });\n      });\n  }, { concurrency: config.asyncCompareLimit || ASYNC_COMPARE_LIMIT }).then(function () {\n    return report;\n  }, function (e) {\n    logger.error('The comparison failed with error: ' + e);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/streamToPromise.js":"module.exports = function onStreamEnd (stream, result) {\n  return new Promise(function (resolve, reject) {\n    if (stream.writable) {\n      stream.on('finish', function () {\n        resolve(result);\n      });\n    }\n\n    if (stream.readable) {\n      stream.on('end', function () {\n        resolve(result);\n      });\n    }\n\n    stream.on('close', function () {\n      resolve(result);\n    });\n\n    stream.on('error', function (error) {\n      reject(error);\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/Reporter.js":"function Test (pair) {\n  this.pair = pair;\n  this.status = 'running';\n}\n\nTest.prototype.passed = function () {\n  return this.status === 'pass';\n};\n\nfunction Reporter (testSuite) {\n  this.testSuite = testSuite;\n  this.tests = [];\n}\n\nReporter.prototype.addTest = function (pair) {\n  var t = new Test(pair);\n  this.tests.push(t);\n\n  return t;\n};\n\nReporter.prototype.passed = function () {\n  var count = 0;\n\n  for (var test in this.tests) {\n    if (this.tests.hasOwnProperty(test) && this.tests[test].passed()) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\nReporter.prototype.failed = function () {\n  var count = 0;\n\n  for (var test in this.tests) {\n    if (this.tests.hasOwnProperty(test) && !this.tests[test].passed()) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\nmodule.exports = Reporter;\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/command/test.js":"var createBitmaps = require('../util/createBitmaps');\n\n// This task will generate a date-named directory with DOM screenshot files as specified in `./capture/config.json` followed by running a report.\n// NOTE: If there is no bitmaps_reference directory or if the bitmaps_reference directory is empty then a new batch of reference files will be generated in the bitmaps_reference directory.  Reporting will be skipped in this case.\nmodule.exports = {\n  execute: function (config) {\n    return createBitmaps(config, false).then(function () {\n      var executeCommand = require('./index');\n      return executeCommand('_report', config);\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/command/approve.js":"var fs = require('../util/fs');\nvar path = require('path');\nvar map = require('p-map');\n\nvar FAILED_DIFF_RE = /^failed_diff_/;\n\n// This task will copy ALL test bitmap files (from the most recent test directory) to the reference directory overwritting any exisiting files.\nmodule.exports = {\n  execute: function (config) {\n    // TODO:  IF Exists config.bitmaps_test  &&  list.length > 0n  (otherwise throw)\n    console.log('Copying from ' + config.bitmaps_test + ' to ' + config.bitmaps_reference + '.');\n    return fs.readdir(config.bitmaps_test, (err, list) => {\n      if (err) {\n        console.log(err.stack);\n      }\n      var src = path.join(config.bitmaps_test, list[list.length - 1]);\n      return fs.readdir(src, (err, files) => {\n        if (err) {\n          console.log(err.stack);\n        }\n        console.log('The following files will be promoted to reference...');\n        return map(files, (file) => {\n          if (FAILED_DIFF_RE.test(file)) {\n            file = file.replace(FAILED_DIFF_RE, \"\");\n            console.log('> ', file);\n            return fs.copy(path.join(src, file), path.join(config.bitmaps_reference, file));\n          }\n          return true;\n        });\n      });\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/makeConfig.js":"var path = require('path');\nvar extendConfig = require('./extendConfig');\n\nfunction projectPath (config) {\n  // Legacy mode, if the cwd is the backstop module\n  if (config.backstop === process.cwd()) {\n    console.log('BackstopJS is running in legacy mode.');\n    return path.join(__dirname, '../../../..');\n  }\n  return process.cwd();\n}\n\nfunction loadProjectConfig (command, options, config) {\n  // TEST REPORT FILE NAME\n  var customTestReportFileName = options && (options.testReportFileName || null);\n  if (customTestReportFileName) {\n    config.testReportFileName = options.testReportFileName || null;\n  }\n\n  var customConfigPath = options && (options.backstopConfigFilePath || options.configPath);\n  if(options && typeof options.config === \"string\"  && !customConfigPath){\n    customConfigPath = options.config;\n  }\n\n  if (customConfigPath) {\n    if (path.isAbsolute(customConfigPath)) {\n      config.backstopConfigFileName = customConfigPath;\n    } else {\n      config.backstopConfigFileName = path.join(config.projectPath, customConfigPath);\n    }\n  } else {\n    config.backstopConfigFileName = path.join(config.projectPath, 'backstop.json');\n  }\n\n  var userConfig = {};\n  var CMD_REQUIRES_CONFIG = command !== 'genConfig';\n  if (CMD_REQUIRES_CONFIG) {\n    if (options && typeof options.config === 'object') {\n      console.log('BackstopJS uses a passed object as config');\n      userConfig = options.config;\n    } else if (config.backstopConfigFileName) {\n      try {\n        console.log('BackstopJS loading config: ', config.backstopConfigFileName, '\\n');\n        userConfig = require(config.backstopConfigFileName);\n      } catch (e) {\n        console.error('Error ' + e);\n        process.exit(1);\n      }\n    }\n  }\n\n  return userConfig;\n}\n\nfunction makeConfig (command, options) {\n  var config = {};\n\n  config.args = options || {};\n\n  config.backstop = path.join(__dirname, '../..');\n  config.projectPath = projectPath(config);\n\n  var userConfig = loadProjectConfig(command, options, config);\n\n  return extendConfig(config, userConfig);\n}\n\nmodule.exports = makeConfig;\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/extendConfig.js":"var path = require('path');\nvar temp = require('temp');\nvar fs = require('fs');\nvar hash = require('object-hash');\nconst tmpdir = require('os').tmpdir();\n\nfunction extendConfig (config, userConfig) {\n  bitmapPaths(config, userConfig);\n  ci(config, userConfig);\n  htmlReport(config, userConfig);\n  comparePaths(config);\n  captureConfigPaths(config);\n  casper(config, userConfig);\n\n  config.engine = userConfig.engine || null;\n  config.report = userConfig.report || ['browser'];\n  config.defaultMisMatchThreshold = 0.1;\n  config.debug = userConfig.debug || false;\n  config.resembleOutputOptions = userConfig.resembleOutputOptions;\n  config.asyncCompareLimit = userConfig.asyncCompareLimit;\n  return config;\n}\n\nfunction bitmapPaths (config, userConfig) {\n  config.bitmaps_reference = path.join(config.projectPath, 'backstop_data', 'bitmaps_reference');\n  config.bitmaps_test = path.join(config.projectPath, 'backstop_data', 'bitmaps_test');\n  if (userConfig.paths) {\n    config.bitmaps_reference = userConfig.paths.bitmaps_reference || config.bitmaps_reference;\n    config.bitmaps_test = userConfig.paths.bitmaps_test || config.bitmaps_test;\n  }\n}\n\nfunction ci (config, userConfig) {\n  config.ci_report = path.join(config.projectPath, 'backstop_data', 'ci_report');\n  if (userConfig.paths) {\n    config.ci_report = userConfig.paths.ci_report || config.ci_report;\n  }\n  config.ciReport = {\n    format: 'junit',\n    testReportFileName: 'xunit',\n    testSuiteName: 'BackstopJS'\n  };\n\n  if (userConfig.ci) {\n    config.ciReport = {\n      format: userConfig.ci.format || config.ciReport.format,\n      testReportFileName: userConfig.ci.testReportFileName || config.ciReport.testReportFileName,\n      testSuiteName: userConfig.ci.testSuiteName || config.ciReport.testSuiteName\n    };\n  }\n}\n\nfunction htmlReport (config, userConfig) {\n  config.html_report = path.join(config.projectPath, 'backstop_data', 'html_report');\n  config.openReport = userConfig.openReport === undefined ? true : userConfig.openReport;\n\n  if (userConfig.paths) {\n    config.html_report = userConfig.paths.html_report || config.html_report;\n  }\n\n  config.compareConfigFileName = path.join(config.html_report, 'config.js');\n  config.compareReportURL = path.join(config.html_report, 'index.html');\n}\n\nfunction comparePaths (config) {\n  config.comparePath = path.join(config.backstop, 'compare');\n  config.tempCompareConfigFileName = temp.path({suffix: '.json'});\n}\n\nfunction captureConfigPaths (config) {\n  var captureDir = path.join(tmpdir, 'capture');\n  if (!fs.existsSync(captureDir)) {\n    fs.mkdirSync(captureDir);\n  }\n  var configHash = hash(config);\n  config.captureConfigFileName = path.join(tmpdir, 'capture', configHash + '.json');\n  config.captureConfigFileNameDefault = path.join(config.backstop, 'capture', 'config.default.json');\n}\n\nfunction casper (config, userConfig) {\n  config.casper_scripts = path.join(config.projectPath, 'backstop_data', 'casper_scripts');\n  config.casper_scripts_default = path.join(config.backstop, 'capture', 'casper_scripts');\n\n  config.casperFlags = userConfig.casperFlags || null;\n\n  if (userConfig.paths) {\n    config.casper_scripts = userConfig.paths.casper_scripts || config.casper_scripts;\n  }\n}\n\nmodule.exports = extendConfig;\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/capture/echoFiles.js":"/* eslint-disable no-path-concat */\n\nvar fs = require('fs');\nvar scriptName = fs.absolute(require('system').args[3]);\nvar __dirname = scriptName.substring(0, scriptName.lastIndexOf('/'));\n\nvar genConfigPath = __dirname + '/config.json'; // TODO :: find a way to use that directly from the main configuration\nvar config = require(genConfigPath);\nif (!config.paths) {\n  config.paths = {};\n}\n\nvar scenarios = config.scenarios || config.grabConfigs;\n\nvar compareConfig = {testPairs: []};\nif (config.misMatchThreshold) {\n  compareConfig.misMatchThreshold = config.misMatchThreshold;\n}\n\nvar casper = require('casper').create({\n  logLevel: config.debug ? 'debug' : 'info',\n  verbose: config.debug\n});\n\ncasper.echo('-------');\n\ncasper.echo('Casper CLI passed args vvv');\nrequire('utils').dump(casper.cli.args);\n\ncasper.echo('Casper CLI passed options vvv');\nrequire('utils').dump(casper.cli.options);\n\ncasper.echo('-------');\n\ncasper.on('page.error', function (msg, trace) {\n  this.echo('---');\n  this.echo('vvv Remote Error  ' + msg, 'error');\n  this.echo('file:     ' + trace[0].file, 'WARNING');\n  this.echo('line:     ' + trace[0].line, 'WARNING');\n  this.echo('function: ' + trace[0]['function'], 'WARNING');\n  this.echo('---');\n});\n\ncasper.on('remote.message', function (message) {\n  this.echo('remote console > ' + message);\n});\n\ncasper.on('resource.received', function (resource) {\n  // casper.echo('resource.received > ' + resource.url);\n\n  var status = resource.status;\n  if (status >= 400) {\n    casper.log('vvv remote error ' + resource.url + ' failed to load (' + status + ')', 'error');\n  }\n});\n\nfunction capturePageSelectors (scenarios) {\n  casper.start();\n\n  casper.each(scenarios, function (casper, scenario) {\n    console.log('LOG> CASPER IS RUNNING');\n\n    casper.thenOpen(scenario.url, function () {\n      console.log('LOG> PHANTOM IS RUNNING');\n      casper.wait(100);\n    });\n\n    casper.then(function () {\n      this.echo('\\n==================\\nCurrent location is ' + scenario.url + '\\n==================\\n', 'warn');\n      var src = this.evaluate(function () { return document.all[0].outerHTML; });\n      this.echo('\\n\\n' + src);\n    });\n  });// end casper.each scenario\n}\n\ncapturePageSelectors(scenarios);\n\ncasper.run(function () {\n  console.log('\\n======================\\nechoFiles has completed \\n=======================\\n');\n  this.exit();\n});\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/capture/genBitmaps.js":"/* eslint-disable no-path-concat */\nvar DOCUMENT_SELECTOR = 'document';\n\nvar fs = require('fs');\nvar cwd = fs.workingDirectory;\nvar system = require('system');\nvar args = system.args;\nvar val, index, captureConfigFileName;\nif (args.length !== 1) {\n  args.forEach(function (arg, i) {\n    arg = arg.split('--');\n    if (arg[1]) {\n      arg = arg[1].split('=');\n      val = arg[1];\n      index = arg[0];\n      if (index === 'captureConfigFileName') {\n        captureConfigFileName = val;\n      }\n    }\n  });\n}\n\nvar scriptName = fs.absolute(require('system').args[3]);\nvar __dirname = scriptName.substring(0, scriptName.lastIndexOf('/'));\n\nvar selectorNotFoundPath = __dirname + '/resources/selectorNotFound_noun_164558_cc.png';\nvar hiddenSelectorPath = __dirname + '/resources/hiddenSelector_noun_63405.png';\nvar genConfigPath = captureConfigFileName; // TODO :: find a way to use that directly from the main configuration\n\nvar config = require(genConfigPath);\nif (!config.paths) {\n  config.paths = {};\n}\n\nvar outputFormat = '.' + (config.outputFormat && config.outputFormat.match(/jpg|jpeg/) || 'png');\nvar bitmapsReferencePath = config.paths.bitmaps_reference || 'bitmaps_reference';\nvar bitmapsTestPath = config.paths.bitmaps_test || 'bitmaps_test';\nvar casperScriptsPath = config.paths.casper_scripts || null;\nvar comparePairsFileName = config.paths.tempCompareConfigFileName;\nvar viewports = config.viewports;\nvar scenarios = config.scenarios || config.grabConfigs;\nvar configId = config.id || genHash(config.backstopConfigFileName);\nvar fileNameTemplate = config.fileNameTemplate || '{configId}_{scenarioLabel}_{selectorIndex}_{selectorLabel}_{viewportIndex}_{viewportLabel}';\n\nvar compareConfig = {testPairs: []};\n\nvar casper = require('casper').create({\n  logLevel: config.debug ? 'debug' : 'info',\n  verbose: config.debug\n});\n\nif (config.debug) {\n  console.log('Debug is enabled!');\n\n  casper.on('page.error', function (msg, trace) {\n    this.echo('Remote Error >    ' + msg, 'error');\n    this.echo('file:     ' + trace[0].file, 'WARNING');\n    this.echo('line:     ' + trace[0].line, 'WARNING');\n    this.echo('function: ' + trace[0]['function'], 'WARNING');\n  });\n}\n\ncasper.on('resource.received', function (resource) {\n  var status = resource.status;\n  if (status >= 400) {\n    casper.log('remote error > ' + resource.url + ' failed to load (' + status + ')', 'error');\n  }\n});\n\nvar consoleBuffer = '';\ncasper.on('remote.message', function (message) {\n  casper.echo(message);\n  consoleBuffer = consoleBuffer + '\\n' + message;\n});\n\nfunction capturePageSelectors (scenarios, viewports, bitmapsReferencePath, bitmapsTestPath, isReference) {\n  var screenshotNow = new Date();\n  var screenshotDateTime = screenshotNow.getFullYear() + pad(screenshotNow.getMonth() + 1) + pad(screenshotNow.getDate()) + '-' + pad(screenshotNow.getHours()) + pad(screenshotNow.getMinutes()) + pad(screenshotNow.getSeconds());\n\n  casper.start();\n\n  casper.each(scenarios, function (casper, scenario, i) {\n    var scenarioLabelSafe = makeSafe(scenario.label);\n    scenario.sIndex = i;\n\n    processScenario(casper, scenario, scenarioLabelSafe, scenarioLabelSafe, viewports, bitmapsReferencePath, bitmapsTestPath, screenshotDateTime);\n\n    if (!isReference && scenario.hasOwnProperty('variants')) {\n      scenario.variants.forEach(function (variant) {\n        var variantLabelSafe = makeSafe(variant.label);\n        processScenario(casper, variant, variantLabelSafe, scenarioLabelSafe, viewports, bitmapsReferencePath, bitmapsTestPath, screenshotDateTime);\n      });\n    }\n  });// end casper.each scenario\n}\n\nfunction getFilename (scenarioIndex, scenarioLabel, selectorIndex, selectorLabel, viewportIndex, viewportLabel) {\n  var fileName = fileNameTemplate\n    .replace(/\\{configId\\}/, configId)\n    .replace(/\\{scenarioIndex\\}/, scenarioIndex)\n    .replace(/\\{scenarioLabel\\}/, scenarioLabel)\n    .replace(/\\{selectorIndex\\}/, selectorIndex)\n    .replace(/\\{selectorLabel\\}/, selectorLabel)\n    .replace(/\\{viewportIndex\\}/, viewportIndex)\n    .replace(/\\{viewportLabel\\}/, makeSafe(viewportLabel))\n    .replace(/[^a-z0-9_-]/gi, ''); // remove anything that's not a letter or a number or dash or underscore.\n\n  var extRegExp = new RegExp(outputFormat + '$', 'i');\n  if (!extRegExp.test(fileName)) {\n    fileName = fileName + outputFormat;\n  }\n\n  return fileName;\n}\n\nfunction processScenario (casper, scenario, scenarioOrVariantLabel, scenarioLabel, viewports, bitmapsReferencePath, bitmapsTestPath, screenshotDateTime) {\n  var scriptTimeout = 20000;\n\n  if (casper.cli.options.user && casper.cli.options.password) {\n    console.log('Auth User via CLI: ' + casper.cli.options.user);\n    casper.setHttpAuth(casper.cli.options.user, casper.cli.options.password);\n  }\n\n  casper.each(viewports, function (casper, vp, viewportIndex) {\n    this.then(function () {\n      this.viewport(vp.width || vp.viewport.width, vp.height || vp.viewport.height);\n    });\n\n    var url = scenario.url;\n    if (isReference && scenario.referenceUrl) {\n      url = scenario.referenceUrl;\n    }\n\n    var onBeforeScript = scenario.onBeforeScript || config.onBeforeScript;\n    if (onBeforeScript) {\n      require(getScriptPath(onBeforeScript))(casper, scenario, vp, isReference);\n    }\n\n    this.thenOpen(url, function () {\n      casper.waitFor(\n        function () { // test\n          var readyEvent = scenario.readyEvent || config.readyEvent;\n          if (!readyEvent) {\n            return true;\n          }\n          var regExReadyFlag = new RegExp(readyEvent, 'i');\n          return consoleBuffer.search(regExReadyFlag) > -1;\n        },\n        function () { // on done\n          consoleBuffer = '';\n          casper.echo('Ready event received.');\n        },\n        function () {\n          casper.echo('Error while waiting for ready event.');\n        }, // on timeout\n        scriptTimeout\n      );\n      casper.wait(scenario.delay || 1);\n    });\n\n    casper.then(function () {\n      this.echo('Current location is ' + url, 'info');\n\n      if (config.debug) {\n        var src = this.evaluate(function () {\n          return document.body.outerHTML;\n        });\n        this.echo(src);\n      }\n    });\n\n    // Custom casperjs scripting after ready event and delay\n    casper.then(function () {\n      // onReadyScript files should export a module like so:\n      //\n      // module.exports = function(casper, scenario, vp) {\n      //   // run custom casperjs code\n      // };\n      //\n      var onReadyScript = scenario.onReadyScript || config.onReadyScript;\n      if (onReadyScript) {\n        require(getScriptPath(onReadyScript))(casper, scenario, vp, isReference);\n      }\n    });\n\n    this.then(function () {\n      this.echo('Capturing screenshots for ' + makeSafe(vp.name) + ' (' + (vp.width || vp.viewport.width) + 'x' + (vp.height || vp.viewport.height) + ')', 'info');\n\n      // HIDE SELECTORS WE WANT TO AVOID\n      if (scenario.hasOwnProperty('hideSelectors')) {\n        scenario.hideSelectors.forEach(function (o, i, a) {\n          casper.evaluate(function (o) {\n            Array.prototype.forEach.call(document.querySelectorAll(o), function (s, j) {\n              s.style.visibility = 'hidden';\n            });\n          }, o);\n        });\n      }\n\n      // REMOVE UNWANTED SELECTORS FROM RENDER TREE\n      if (scenario.hasOwnProperty('removeSelectors')) {\n        scenario.removeSelectors.forEach(function (o, i, a) {\n          casper.evaluate(function (o) {\n            Array.prototype.forEach.call(document.querySelectorAll(o), function (s, j) {\n              s.style.display = 'none';\n              s.classList.add('__86d');\n            });\n          }, o);\n        });\n      }\n\n      // CREATE SCREEN SHOTS AND TEST COMPARE CONFIGURATION (CONFIG FILE WILL BE SAVED WHEN THIS PROCESS RETURNS)\n      // If no selectors are provided then set the default DOCUMENT_SELECTOR\n      if (!scenario.hasOwnProperty('selectors') || !scenario.selectors.length) {\n        scenario.selectors = [DOCUMENT_SELECTOR];\n      }\n\n      if (scenario.selectorExpansion) {\n        scenario.selectorsExpanded = scenario.selectors.reduce(function (acc, selector) {\n          if (selector === DOCUMENT_SELECTOR) {\n            return acc.concat([DOCUMENT_SELECTOR]);\n          }\n\n          var expandedSelector = casper.evaluate(function (selector) {\n            return [].slice.call(document.querySelectorAll(selector)).map(function (element, expandedIndex) {\n              var indexPartial = '__n' + expandedIndex;\n\n              if (element.classList.contains('__86d')) {\n                return '';\n              }\n\n              if (!expandedIndex) {\n                // only first element is used for screenshots -- even if multiple instances exist.\n                // therefore index 0 does not need extended qualification.\n                return selector;\n              }\n\n              // update all matching selectors with additional indexPartial class\n              element.classList.add(indexPartial);\n\n              // return array of fully-qualified classnames\n              return selector + '.' + indexPartial;\n            });\n          }, selector);\n\n          // concat arrays of fully-qualified classnames\n          return acc.concat(expandedSelector);\n        }, []).filter(function (selector) {\n          return selector !== '';\n        });\n      } else {\n        scenario.selectorsExpanded = scenario.selectors;\n      }\n\n      scenario.selectorsExpanded.forEach(function (o, i, a) {\n        var cleanedSelectorName = o.replace(/[^a-z0-9_-]/gi, ''); // remove anything that's not a letter or a number\n\n        var fileName = getFilename(scenario.sIndex, scenarioOrVariantLabel, i, cleanedSelectorName, viewportIndex, vp.name);\n\n        var referenceFilePath = bitmapsReferencePath + '/' + getFilename(scenario.sIndex, scenarioLabel, i, cleanedSelectorName, viewportIndex, vp.name);\n        var testFilePath = bitmapsTestPath + '/' + screenshotDateTime + '/' + fileName;\n\n        var filePath = (isReference) ? referenceFilePath : testFilePath;\n\n        captureScreenshot(casper, filePath, o);\n\n        if (!isReference) {\n          compareConfig.testPairs.push({\n            reference: referenceFilePath,\n            test: testFilePath,\n            selector: o,\n            fileName: fileName,\n            label: scenario.label,\n            misMatchThreshold: getMisMatchThreshHold(scenario)\n          });\n        }\n        // casper.echo('remote capture to > '+filePath,'info');\n      });// end topLevelModules.forEach\n    });\n  });// end casper.each viewports\n}\n\nfunction getMisMatchThreshHold (scenario) {\n  if (typeof scenario.misMatchThreshold !== 'undefined') { return scenario.misMatchThreshold; }\n\n  if (typeof config.misMatchThreshold !== 'undefined') { return config.misMatchThreshold; }\n\n  return config.defaultMisMatchThreshold;\n}\n\nfunction captureScreenshot (casper, filePath, selector) {\n  if (selector === 'body:noclip' || selector === 'document') {\n    casper.capture(filePath);\n  } else if (casper.exists(selector)) {\n    if (casper.visible(selector)) {\n      casper.captureSelector(filePath, selector);\n    } else {\n      fs.write(filePath, fs.read(hiddenSelectorPath, 'b'), 'b');\n    }\n  } else {\n    fs.write(filePath, fs.read(selectorNotFoundPath, 'b'), 'b');\n  }\n}\n\nvar isReference = config.isReference;\nif (isReference) {\n  console.log('CREATING NEW REFERENCE FILES');\n}\n\ncapturePageSelectors(scenarios, viewports, bitmapsReferencePath, bitmapsTestPath, isReference);\n\ncasper.run(function () {\n  complete();\n  this.exit();\n});\n\nfunction complete () {\n  var compareConfigJSON = {compareConfig: compareConfig};\n  fs.write(comparePairsFileName, JSON.stringify(compareConfigJSON, null, 2), 'w');\n  console.log('Comparison config file updated.');\n}\n\nfunction pad (number) {\n  var r = String(number);\n  if (r.length === 1) {\n    r = '0' + r;\n  }\n  return r;\n}\n\nfunction getScriptPath (scriptFilePath) {\n  var scriptPath = ensureFileSuffix(scriptFilePath, 'js');\n\n  if (casperScriptsPath) {\n    scriptPath = glueStringsWithSlash(casperScriptsPath, scriptPath);\n  }\n\n  // make sure it's there...\n  if (!fs.isFile(scriptPath)) {\n    casper.echo(scriptPath + ' was not found.', 'ERROR');\n    return;\n  }\n\n  return cwd + fs.separator + scriptPath;\n}\n\nfunction ensureFileSuffix (filename, suffix) {\n  var re = new RegExp('\\.' + suffix + '$', ''); // eslint-disable-line no-useless-escape\n\n  return filename.replace(re, '') + '.' + suffix;\n}\n\n// merge both strings while soft-enforcing a single slash between them\nfunction glueStringsWithSlash (stringA, stringB) {\n  return stringA.replace(/\\/$/, '') + '/' + stringB.replace(/^\\//, '');\n}\n\nfunction genHash (str) {\n  var hash = 0;\n  var i;\n  var chr;\n  var len;\n  if (!str) return hash;\n  str = str.toString();\n  for (i = 0, len = str.length; i < len; i++) {\n    chr = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n  // return a string and replace a negative sign with a zero\n  return hash.toString().replace(/^-/, 0);\n}\n\nfunction makeSafe (str) {\n  return str.replace(/[ /]/g, '_');\n}\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/cli/usage.js":"var version = require('../package.json').version;\nvar makeSpaces = require('../core/util/makeSpaces');\n\nvar commandsDescription = {\n  reference: 'Create reference screenshots of your web content at multiple sceen sizes.',\n  test: 'Create test screenshots of your web content and compare against the set you created using `backstop reference`.',\n  genConfig: 'Generate a configuration file boilerplate in your current directory. PLEASE NOTE: this will force overwrite any existing config.',\n  openReport: 'View your last test screenshots in your browser.'\n};\n\nvar optionsDescription = {\n  '-h, --help': 'Display usage',\n  '-v, --version': 'Display version',\n  '-i': 'Incremental reference generation'\n};\n\nfunction makeDescription (descriptions) {\n  return Object.keys(descriptions)\n    .map(function (commandName) {\n      return makeSpaces(4) + commandName + spacesBetweenCommandAndDescription(commandName) + descriptions[commandName];\n    })\n    .join('\\n');\n}\n\nfunction spacesBetweenCommandAndDescription (commandName) {\n  return makeSpaces(2 + leftPaddingOfDescription - commandName.length);\n}\n\n// Number of spaces to echo before writing description\nvar leftPaddingOfDescription = Object.keys(commandsDescription)\n  .concat(Object.keys(optionsDescription))\n  .map(function (string) {\n    return string.length;\n  })\n  .reduce(function maxReducer (max, length) {\n    return Math.max(max, length);\n  }, 0);\n\nvar usage = '\\\nWelcome to BackstopJS ' + version + ' CLI\\n\\\n\\n\\\nCommands:\\n\\\n' + makeDescription(commandsDescription) + '\\n\\\n\\n\\\nOptions:\\n\\\n' + makeDescription(optionsDescription) + '\\n\\\n\\n';\n\nmodule.exports = usage;\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/backstop_data/casper_scripts/onBefore.js":"module.exports = function (casper, scenario, vp) {\n  //This script runs before your app loads. Edit here to log-in, load cookies or set other states required for your test.\n  console.log('onBefore.js has run for '+ vp.name + '.');\n};\n\n// // EXAMPLE: LOGIN BEFORE RUNNING TESTS\n// module.exports = function(casper, scenario, vp) {\n//   casper.thenOpen(scenario.url, function(){\n//      if (this.exists('form#user-login-form')) {\n//        this.fill('form#loginForm',{\n//           'username': 'test',\n//           'password': 'changeme'\n//        }, true);\n//      }\n//   });\n// };\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/backstop_data/casper_scripts/onReady.js":"module.exports = function (casper, scenario, vp) {\n  casper.evaluate(function () {\n    //Your web-app is now loaded. Edit here to simulate user interacions or other state changes.\n  });\n  console.log('onReady.js has run for ' + vp.name + '.');\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/compare/js/compare.js":"/* global angular */\n\nvar tests = {};\n\nfunction report (report) { // eslint-disable-line no-unused-vars\n  tests = report;\n}\n\nvar compareApp = angular.module('compareApp', ['ui.bootstrap', 'angular-clipboard', 'revealer']);\n\nvar defaultMisMatchThreshold = 1;\n\nvar TestPair = function (o) {\n  this.a = {src: o.pair.reference || '', srcClass: 'reference'};\n  this.b = {src: o.pair.test || '', srcClass: 'test'};\n  this.c = {src: o.pair.diffImage || '', srcClass: 'diff'};\n\n  this.report = JSON.stringify(o.pair.diff, null, 2);\n  this.passed = o.status === 'pass';\n  this.meta = o;\n  this.meta.misMatchThreshold = (o && o.misMatchThreshold && o.misMatchThreshold >= 0) ? o.misMatchThreshold : defaultMisMatchThreshold;\n};\n\ncompareApp.controller('MainCtrl', ['$scope', '$uibModal', 'clipboard', function ($scope, $uibModal, clipboard) {\n  $scope.name = tests.testSuite;\n  $scope.testPairs = [];\n  $scope.alerts = [];\n  $scope.passedCount = 0;\n  $scope.testDuration = 0;\n  $scope.testIsRunning = true;\n  $scope.isSummaryListCollapsed = true;\n  $scope.showPairStats = false;\n\n  if (!clipboard.supported) {\n    $scope.alerts.push({type: 'danger', msg: 'Sorry, copy to clipboard is not supported'});\n  }\n\n  tests.tests.forEach(function (o) {\n    $scope.testDuration += o.pair.diff.analysisTime;\n\n    if (o.pair.diff.isSameDimensions) {\n      delete o.pair.diff.dimensionDifference;\n    }\n\n    delete o.pair.diff.analysisTime;\n\n    if (o.status === 'pass') {\n      $scope.passedCount++;\n    }\n\n    $scope.testPairs.push(new TestPair(o));\n  });\n\n  $scope.statusFilter = 'failed';\n  if ($scope.passedCount === $scope.testPairs.length) {\n    $scope.statusFilter = 'passed';\n  }\n\n  $scope.detailFilterOptions = ['failed', 'passed', 'all', 'none'];\n\n  $scope.displayOnStatusFilter = function (o) {\n    if ($scope.statusFilter === 'all') {\n      return true;\n    }\n\n    if ($scope.statusFilter === 'failed' && !o.passed) {\n      return true;\n    }\n\n    if ($scope.statusFilter === 'passed' && o.passed) {\n      return true;\n    }\n\n    return false;\n  };\n\n  $scope.copyFailedTestsIds = function () {\n    var failedTests = '';\n    $scope.testPairs.forEach(function (test) {\n      if (!test.passed) {\n        failedTests = failedTests + test.meta.pair.label + ',';\n      }\n    });\n\n    if (failedTests) {\n      clipboard.copyText(failedTests.substring(0, failedTests.length - 1));\n      $scope.alerts.push({type: 'success', msg: 'Failed tests were copied to clipboard'});\n    } else {\n      $scope.alerts.push({type: 'warning', msg: 'No failed tests were found'});\n    }\n  };\n\n  $scope.closeAlert = function (index) {\n    $scope.alerts.splice(index, 1);\n  };\n\n  $scope.openModal = function (size, referenceImg, testImg) {\n    $uibModal.open({\n      animation: true,\n      ariaLabelledBy: 'modal-title',\n      ariaDescribedBy: 'modal-body',\n      templateUrl: 'myModalContent.html',\n      controller: 'ModalInstanceCtrl',\n      windowClass: 'modal',\n      resolve: {\n        referenceImg: function () {\n          return referenceImg;\n        },\n        testImg: function () {\n          return testImg;\n        }\n      }\n    });\n  };\n}]);\n\n// Please note that $uibModalInstance represents a modal window (instance) dependency.\n// It is not the same as the $uibModal service used above.\ncompareApp.controller('ModalInstanceCtrl', function ($scope, $uibModalInstance, referenceImg, testImg) {\n  $scope.imgPositionValue = 50;\n\n  $scope.selected = {\n    referenceImg: referenceImg,\n    testImg: testImg\n  };\n\n  $scope.setImgPositionValue = function (value) {\n    $scope.imgPositionValue = value;\n  };\n\n  $scope.ok = function () {\n    $uibModalInstance.close();\n  };\n\n  $scope.cancel = function () {\n    $uibModalInstance.dismiss('cancel');\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/compare/js/revealer.js":"/* global define */\n(function (root, factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD support\n    define(['angular'], factory);\n  } else if (typeof module !== 'undefined' && typeof module.exports === 'object') {\n    // commonJS support\n    module.exports = factory(require('angular'));\n  } else {\n    // no module loading system\n    return factory(root.angular);\n  }\n})(this, function (angular) {\n  'use strict';\n\n  var module = 'revealer';\n\n  /**\n   * ngDoc module\n   * @name 'revealer'\n   * @description allow two images to be layered on top of each other\n   *              and compared using a drag handler\n   */\n  angular\n  .module(module, [])\n  .directive('revealer', revealer);\n\n  var multipleEvents = [{\n    action: 'mousedown',\n    move: 'mousemove',\n    release: 'mouseup'\n  }, {\n    action: 'touchstart',\n    move: 'touchmove',\n    release: 'touchend'\n  }];\n\n  revealer.$inject = ['$document', '$window'];\n\n  /**\n   * @ngdoc directive\n   * @name revealer.directive:revealer\n   * @description directive that will take two images and create a handler *              that allows for the top image to be adjusted that reveals\n   *              the image below. Images will be inherit the size of its\n   *              parent container\n   * @element <revealer top-image=\"top.png\" top-label=\"Top Image\" bottom-image=\"bottom.png\" bottom-label=\"Bottom Label\"></revealer>\n   * @scope\n   */\n  function revealer ($document, $window) {\n    return {\n      restrcit: 'E',\n      template: ['<div class=\"revealer__container\">',\n                  '<img class=\"revealer__image\" ng-src=\"{{bottomImage}}\">',\n                  '<span class=\"revealer__label revealer__label--right\">{{ bottomLabel}}</span>',\n                  '<div class=\"revealer__top-image\">',\n                    '<img class=\"revealer__image\" ng-src=\"{{topImage}}\">',\n                    '<span class=\"revealer__label revealer__label--left\">{{topLabel}}</span>',\n                  '</div>',\n                  '<span class=\"revealer__handle\"></span>',\n                '</div>'].join(''),\n      scope: {\n        bottomLabel: '@',\n        topLabel: '@',\n        bottomImage: '@',\n        topImage: '@',\n        startPosition: '=?',\n        onComplete: '&',\n        scroll: '=?',\n        scrollOffset: '=?'\n      },\n      link: link\n    };\n\n    function link (scope, elem, attr) {\n      // throw error when image path not provided\n      if ((!scope.topImage) ||\n          (!scope.bottomImage)) {\n        throw Error('please provide a valid path for the top and bottom image attributes on the revealer directive');\n      }\n\n      scope.startPosition = (scope.startPosition && scope.startPosition < 100) ? scope.startPosition : 50;\n\n      scope.scroll = scope.scroll === true;\n      scope.scrollOffset = scope.scrollOffset || 0;\n\n      var handle;\n      var topImage;\n      var revealer;\n      var handleClass;\n      var revealerSettings;\n      var handlerSettings;\n      var handleOffset = 0;\n\n      var handleDrag = throttle(_handleDrag, 40);\n      var handleScroll = throttle(_handleScroll, 20);\n\n      $document.ready(function () {\n        // store the needed elements\n        handle = getElem(elem, '.revealer__handle');\n        topImage = getElem(elem, '.revealer__top-image');\n        revealer = getElem(elem, '.revealer__container');\n        handleClass = 'revealer__handle--drag';\n\n        if (scope.scroll) {\n          // $window does not have on method so it must be wrapped\n          // in an angular.element to use this method\n          angular.element($window).on('scroll', handleScroll);\n        }\n\n        (!scope.scroll) ? setRevealPosition(handle, topImage, scope.startPosition) : setRevealPosition(handle, topImage, 0);\n\n        angular.forEach(multipleEvents, function (eventConfig) {\n          handle.on(eventConfig.action, function (e) {\n            var clickPos;\n\n            handle.addClass(handleClass);\n            revealerSettings = getDimensions(revealer);\n            handlerSettings = getDimensions(handle);\n\n            // get the click/touch postiton of the handler\n            clickPos = mousePos(e, handlerSettings).x;\n\n            // if the click position is on the other side of the handler\n            // we have to set a negative offset, also do some maths to\n            // calculate the actual value to offset\n            if (clickPos > handlerSettings.width / 2) {\n              handleOffset = -(clickPos - handlerSettings.width / 2);\n            } else {\n              handleOffset = (handlerSettings.width / 2 - clickPos);\n            }\n\n            // when the handle is dragged, can either\n            // be a 'mousemove' or 'touchmove' event,\n            // caluclate the position of the overlay\n            $document.on(eventConfig.move, handleDrag);\n\n            // when the release action is triggered unbind\n            // event listerners on drag an elements\n            $document.on(eventConfig.release, removeListeners);\n          });\n        });\n\n        scope.$watch('startPosition', function (newValue, oldValue) {\n          setRevealPosition(handle, topImage, newValue);\n        });\n      }); // ready\n\n      /**\n       * handle the drag of the handle, if the handle is\n       * draged outside the container do nothing. Otherwise\n       * calculate the percentage and set the position of\n       * the handle and the width of the topImage container\n       * @param  {Event Object} e : Event Object\n       */\n      function _handleDrag (e) {\n        e.preventDefault();\n\n        var eventObject = (e.type === 'mousemove') ? e : e.changedTouches[0];\n        var position = mousePos(eventObject, revealerSettings);\n        var percentage;\n\n        position.x += handleOffset;\n\n        if (position.x < 0 || position.x > revealerSettings.width) {\n          return;\n        }\n\n        percentage = (position.x / revealerSettings.width) * 100;\n\n        setRevealPosition(handle, topImage, percentage);\n      }\n\n      /**\n       * when the pages scrolls calculate if the element is in the\n       * viewport and then set the reveal position in relation to\n       * the scroll position of the element\n       * @param  {Event Object} e\n       */\n      function _handleScroll (e) {\n        e.preventDefault();\n\n        // calculate if elem in viewport\n        // if it is, calulate the scroll percentage\n        // in relation to the elem, set percentage for revealer\n        if (inView(elem, $window, scope.scrollOffset)) {\n          var elemTop = getDimensions(elem[0].parentNode).top;\n          var height = window.innerHeight - scope.scrollOffset;\n          var percentage = (height - elemTop) / height * 100;\n\n          if (percentage > 0 && percentage < 100) {\n            setRevealPosition(handle, topImage, percentage);\n          }\n        }\n      }\n\n      /**\n       * ensure only the correct event listener functions\n       * are removed from the 'document' object\n       * @param  {Object} config\n       * @param  {Event object} e\n       */\n      function removeListeners (e) {\n        var configIndex = (e.type === multipleEvents[0].release) ? 0 : 1;\n        var config = multipleEvents[configIndex];\n\n        if (scope.onComplete) {\n          scope.onComplete();\n        }\n\n        handle.removeClass(handleClass);\n        $document.off(config.move, handleDrag);\n        $document.off(config.release, removeListeners);\n\n        if (scope.pageScroll) {\n          angular.element($window).off('scroll', handleScroll);\n        }\n      }\n    } // link\n  } // revealer\n\n  /**\n   * set the position of the handler and the revealer\n   * @param {DOM Object} handle   : drag handler\n   * @param {DOM object} revealer : top image to reveal\n   * @param {Number} position     : position of revealer\n   */\n  function setRevealPosition (handle, revealer, position) {\n    handle.css({ left: appendPercentage(position) });\n    revealer.css({ width: appendPercentage(position) });\n  }\n\n  /**\n   * return an angular element based on the querySelector of the elem provided\n   * @param  {DOM Element} elem : element to find elements near\n   * @param  {String} value     : class to search for\n   * @return {DOM Element}\n   */\n  function getElem (elem, value) {\n    return angular.element(elem[0].querySelector(value));\n  }\n\n  /**\n   * get the mouse coordsinatea based on a target element\n   * @param  {Event object}  e\n   * @param  {Object} target position of target element on page\n   * @return {Object}        x and y coordinates of mouse\n   */\n  function mousePos (e, target) {\n    return {\n      x: e.clientX - target.left\n    };\n  }\n\n  /**\n   * get the settings of the DOM element passed as a parameter\n   * @param  {DOM element} elem\n   * @return {Object}      getBoundingClientRect() results\n   */\n  function getDimensions (elem) {\n    elem = elem[0] || elem;\n    return elem.getBoundingClientRect();\n  }\n\n  /**\n   * return the value as a string with '%' appendPercentage\n   * @param  {Number} value\n   * @return {String} string representation of value\n   */\n  function appendPercentage (value) {\n    return value + '%';\n  }\n\n  /**\n   * utility function to throttle the execution\n   * of the callback, this is useful when every\n   * opertations need to be done on events that\n   * get executed in rapid succession. The callback\n   * will get executed after the delay\n   * @param  {Function} cb\n   * @param  {Number}   delay\n   * @return {Function}\n   */\n  function throttle (cb, delay) {\n    var _this = this;\n    var wait = false;\n\n    function reset () {\n      wait = false;\n    }\n\n    return function () {\n      if (!wait) {\n        cb.apply(_this, arguments);\n        wait = true;\n        setTimeout(reset, delay);\n      }\n    };\n  }\n\n  /**\n   * return if the DOM element is within the window\n   * viewport, offset can be applied\n   * @param  {DOM Object}   elem\n   * @param  {Object}       global\n   * @param  {Number}       offset\n   * @return {Boolean}\n   */\n  function inView (elem, win, offset) {\n    offset = offset || 0;\n    var dimensions = getDimensions(elem[0].parentNode || elem);\n    return (!!dimensions && dimensions.bottom >= 0 && dimensions.top <= win.innerHeight - offset);\n  }\n\n  return module;\n});\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/command/echo.js":"var runCasper = require('../util/runCasper');\n\nmodule.exports = {\n  execute: function (config) {\n    var tests = ['capture/echoFiles.js'];\n    var casperChild = runCasper(config, tests);\n\n    return new Promise(function (resolve, reject) {\n      casperChild.on('close', function (code) {\n        var success = code === 0; // Will be 1 in the event of failure\n        var result = success ? 'Echo files completed.' : 'Echo files failed with code: ' + code;\n\n        console.log('\\n' + result);\n\n        // exit if there was some kind of failure in the casperChild process\n        if (code !== 0) {\n          reject();\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/core/util/isWin.js":"module.exports = /^win/.test(process.platform);\n","/home/travis/build/npmtest/node-npmtest-backstopjs/node_modules/backstopjs/homepage/js/main.js":"\n$('button').click(function(){\n\tlocation.href=\"https://github.com/garris/BackstopJS\";\n})\n"}